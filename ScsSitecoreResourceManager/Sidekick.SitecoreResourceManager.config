<?xml version="1.0"?>
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
	<sitecore>
		<pipelines>
			<scsRegister>
				<processor type="Sidekick.SitecoreResourceManager.SitecoreResourceManagerRegistration, Sidekick.SitecoreResourceManager" >
					<!-- leave blank for any role, seperate multiple roles by | character -->
					<param name="roles"></param>
					<!-- set to "true" to only allow admins-->
					<param name="isAdmin">false</param>
					<!-- leave blank for any users, seperate multiple users by | character -->
					<param name="users"></param>
					<!-- Templates deployed to {webroot}/SitecoreResourceManager will automatically be installed, by setting this to true it will overwrite the templates 
							on each startup.  This makes it so you can manage and update templates and have them distributed to team members automatically.-->
					<param name="replaceExistingTemplates">true</param>
				</processor>
			</scsRegister>
			<propertyProcessorPreCompiled>
			<!-- Processors here will execute before any compiled properties are gathered from the properties json, but after the user defined properties are added.
				Use it to add custom computed properties that the compiled properties rely on-->
			</propertyProcessorPreCompiled>
			<propertyProcessorPostCompiled>
				<!-- Processors here will execute after all properties from the properties.json are aggregated.
				Use it to add custom computed properties that rely on any other properties existing-->
				<processor type="Sidekick.SitecoreResourceManager.Pipelines.PropertyProcessorPostGather.ExtrapolateFromTargetFiles, Sidekick.SitecoreResourceManager" >
					<Layers>foundation,feature,project</Layers>
				</processor>
				<!-- Allows the use of compound layering in compiled or target properties, for example, you can use a compiled property in a compiled property that's used in a target property-->
				<processor type="Sidekick.SitecoreResourceManager.Pipelines.PropertyProcessorPostGather.PropertyLayeredTokenReplacer, Sidekick.SitecoreResourceManager"/>
				<processor type="Sidekick.SitecoreResourceManager.Pipelines.PropertyProcessorPostGather.GenerateDefaultUnicornDependencies, Sidekick.SitecoreResourceManager"/>
			</propertyProcessorPostCompiled>
			<SitecoreResourceManager>
				<!--             CreateTemplate Requires
					_TEMPLATEFOLDERTEMPLATEID_
					_TEMPLATEPATH_
					_BASETEMPLATEID_
					_SITECOREICON_
				-->
				<processor type="Sidekick.SitecoreResourceManager.Pipelines.SitecoreResourceManager.CreateTemplate, Sidekick.SitecoreResourceManager" />


				<!--             CreateRendering Requires
					_RENDERINGFOLDERTEMPLATEID_
					_RENDERPATH_
					_RENDERINGNAME_
					_RENDERINGTEMPLATEID_
					if controller rendering
						_CONTROLLERNAMESPACE_
						_ASSEMBLYNAME_
					if view rendering
						_VIEWPATH_
					_CONTROLLERACTION_
					_CACHEOPTIONS_
				-->
				<processor type="Sidekick.SitecoreResourceManager.Pipelines.SitecoreResourceManager.CreateRendering, Sidekick.SitecoreResourceManager" />

				<!--             OverlayTemplate Requires
					_OVERLAYTARGET_
				-->
				<processor type="Sidekick.SitecoreResourceManager.Pipelines.SitecoreResourceManager.OverlayTemplate, Sidekick.SitecoreResourceManager" />


				<!--             ReplaceAllTokens Requires
					Output from Sidekick.SitecoreResourceManager.Pipelines.SitecoreResourceManager.OverlayTemplate
				-->
				<processor type="Sidekick.SitecoreResourceManager.Pipelines.SitecoreResourceManager.ReplaceAllTokens, Sidekick.SitecoreResourceManager" />


				<!--             ApplyProjectsToSolution Requires
					Output from Sidekick.SitecoreResourceManager.Pipelines.SitecoreResourceManager.OverlayTemplate
					_PROJECTNAME_
					_SOLUTIONPATH_
				-->
				<processor type="Sidekick.SitecoreResourceManager.Pipelines.SitecoreResourceManager.ApplyProjectsToSolution, Sidekick.SitecoreResourceManager" />
				

				<!--             ApplyFilesToProject Requires
					Output from Sidekick.SitecoreResourceManager.Pipelines.SitecoreResourceManager.OverlayTemplate
					_TARGETCONTROLLERPATH_
				-->
				<processor type="Sidekick.SitecoreResourceManager.Pipelines.SitecoreResourceManager.ApplyFilesToProject, Sidekick.SitecoreResourceManager" />


				<!--             AddToExistingController Requires
					_CONTROLLERACTION_
					_TARGETCONTROLLERPATH_
				-->
				<processor type="Sidekick.SitecoreResourceManager.Pipelines.SitecoreResourceManager.AddToExistingController, Sidekick.SitecoreResourceManager">
					<param name="actionFormat">
        public ActionResult _CONTROLLERACTION_()
        {
            return View(_repository.Get_PROJECTNAME_Module());
        }
    </param>
				</processor>

				<!--             ApplyToPlaceholderSettings Requires
					Output from Sidekick.SitecoreResourceManager.Pipelines.SitecoreResourceManager.CreateRendering
					_PLACEHOLDERSETTINGS_
				-->
				<processor type="Sidekick.SitecoreResourceManager.Pipelines.SitecoreResourceManager.ApplyToPlaceholderSettings, Sidekick.SitecoreResourceManager" />
				<!-- ************************************************************************************************************ -->
				<!-- 
					This processor will add a chunk of code to the end of the method defined in the methodName param in the fileName file using the 
					defined template.
					NOTE:  This will only apply to a specific template zip
					NOTE:  You can use tokens
					NOTE:  You can use this processor multiple times but the type attribute must be unique, so make sure each instance has a different
					amount of white space between the namespace and the assembly "[namespace], [assembly]" then "[namespace],  [assembly]" for your next
					this is due to a Sitecore 'feature' that disallows multiple processors of the same type.
				-->
				<processor type="Sidekick.SitecoreResourceManager.Pipelines.SitecoreResourceManager.InsertIntoCsMethod, Sidekick.SitecoreResourceManager" >
					<param name="fileName">_PARENTPROJECTNAME_Configurator.cs</param>
					<param name="template">
        serviceCollection.AddScoped&lt;IStandard_PROJECTNAME_Repository, Standard_PROJECTNAME_Repository&gt;();
        serviceCollection.AddTransient&lt;Standard_PROJECTNAME_Controller&gt;();
    </param>
					<param name="methodName">Configure</param>
					<param name="insertAtEnd">true</param>
					<param name="applicableTemplateZip">Feature-New-Controller.zip</param>
				</processor>

				<processor type="Sidekick.SitecoreResourceManager.Pipelines.SitecoreResourceManager.InsertNewCsMethod,  Sidekick.SitecoreResourceManager">
					<param name="fileName">IStandard_PARENTPROJECTNAME_Repository.cs</param>
					<param name="template">
        _PROJECTNAME_Module Get_PROJECTNAME_Module();
    </param>
					<param name="applicableTemplateZip">Feature-Existing-Controller.zip</param>
				</processor>
				<!-- ************************************************************************************************************ -->
				<!-- 
					This processor will add a method to the end of a cs file defined in the filename param
					NOTE:  This will only apply to a specific template zip
					NOTE:  You can use tokens
					NOTE:  You can use this processor multiple times but the type attribute must be unique, so make sure each instance has a different
					amount of white space between the namespace and the assembly "[namespace], [assembly]" then "[namespace],  [assembly]" for your next
					this is due to a Sitecore 'feature' that disallows multiple processors of the same type.
				-->
				<processor type="Sidekick.SitecoreResourceManager.Pipelines.SitecoreResourceManager.InsertNewCsMethod, Sidekick.SitecoreResourceManager">
					<param name="fileName">Standard_PARENTPROJECTNAME_Repository.cs</param>
					<param name="template">
        public _PROJECTNAME_Module Get_PROJECTNAME_Module()
        {
            return _currentContext.GetDataSource&lt;_PROJECTNAME_Module&gt;();
        }
    </param>
					<param name="applicableTemplateZip">Feature-Existing-Controller.zip</param>
				</processor>
			</SitecoreResourceManager>
		</pipelines>
	</sitecore>
</configuration>
